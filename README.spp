PSDNS Code
==========

## To compile, cd to directory PSDNS then:
First: 
Change the makefile (if needed):

Note: the makefile has already been modified. Otherwise what one needs to do is:
Before compiling the code, make sure that BW is the target machine for compilation in the makefile. 
To do this you can comment out all "MACHINE" lines except "MACHINE = BW". Also, comment out the 
line "CPPFLAGS += -DMHD" in the input file.

Second: 
excute these commands:
   module load fftw
   module load cray-hdf5-parallel
   module load craype-hugepages2M
   make cleanest
   make srcmake
   make

To enable/disable (openMP) thread: If thread is desired, uncomment a CPPFLAGS line of your choice 
that is with the option -DOPENMP. Otherwise compile without using -DOPENMP;
To enable/disable MPI/CAF: Uncomment or comment out -DCAF in CPPFLAGS;
To enable/disable ALLTOALL/ALLTOALLV: Uncomment or comment out -DUSE_EVEN;

Note: It actually will cause problem now to have -DMPI for CPPFLAGS. Do not include -DMPI in the 
flags.

## To run the 3 samples in dir_runs1, dir_runs128, and dirs_run8192: 
-- No additional changes and additions needed for the runs except for the file batch for what 
account the job should be charged to:

The files in directory dir_runs1 can be used to run a simple 4*8  MPI process test
case on 1 node. The file batch in dir_runs1 is a sample PBS script for the run.

The files in directory dir_runs128 can be used to run a simple 32*128 MPI process
test case on 128 nodes. Again the file batch in this directory is a sample PBS script for the run.

The files in directory dir_runs8192 can be used to run a simple 32*8192 MPI process
test case on 8192 nodes. Again the file batch in this directory is a sample PBS script the run.

## To run in general:
Copy files dims and input to a new run directory. Also needed, are directories iostep_timings 
genterated simply by ``mkdir iostep_timings'', and diretorty outpen generated by say, ``csh 
prep_dirs M''. The value M, and the changes to input and dims are discusssed below. 

# Directoires:
Directory iostep_timings needs to be an empty directory for a run;
Directory outpen, is generated by prep_dirs. If there are 2^N MPI processes, then outpen is
generated with ``csh prep_dirs 2^(N/2)'', with N/2 trucated down, or say taken as the floor of N/2.

# Files needed for a run:
File dims defines MPI process layout; The suggested layout dims = p1 p2, is p1 < (or <<) p2. 
Usually, for larger problems, p1 is set to the MPI processes on a node, and p2 is set to be 
the number of nodes in the run. E.G. 

File input defines the problem sizes, RK method used, and IO choices such as how often time step 
info are printed and how often checkpoints are generated. 
Line 1 and 2 define the problem sizes, e.g.
    nx,ny,nz,nc
    8192,8192,8192,0
is for a 8192^3 problem;

Line 3 and defines how output and check point will be done, e.g.
    nsteps,iostep,istart,kstop,isave
    20,5,0,-1,10
is to run 20 steps, have timing output (etc) every 5 steps, and having checkpoint every 10 steps;

Line 8 needs to be: 
    -2,-2,-2

Line 37-40, are for RK methods and problem size:
    rkmethod
       4
    nxpad,nypad,nzpad
       8192,8192,8192
Here, it says RK4 is used, and the probelm size is 8192^3.

Line 48 needs to be: 
    -1, -1, -1

## Ouput:
There are many files generated by PSDNS analyzing the program and providing information on time 
spent on different tasks.  After a successful run, one will see in the run directory:

aftrans_all  cpu_rk_all       iostep_timings/  rstensor		  t_itrans_all	 vgmomt
batch	     dims	      log	       run		  t_kxcomm1_all  vgmomtn
batch.jl     dns_max_epsenst  metrics	       spectrum		  t_kxcomm2_all  vgskew
chkptou      dns_pdf_epsenst  outdata.grid     spectrum.free	  t_loctsp_all	 vorstat
chkptou.1    eulstat	      outpen/	       sptr1d		  tmij		 vort_skewflat
chkptou.2    forcinp	      prep_dirs*       sptr3d		  trfsptr	 wisdomd
corr1d	     fort.801	      ranout	       stderr.5556411.bw  t_trans_all
corrmat      input	      ranout.1	       stdout.5556411.bw  t_xkcomm1_all
courant      input.new	      ranout.2	       t_comm_all	  t_xkcomm2_all

In directory outpen, velocity data are stored in binary files PE by PE, and are distributed to 
the M subdirectories. Recall, M = 2^(N/2) and N/2 is trucated down. If there are K checkpoints, 
then there are K files for a PE.

# Correctness: 
For correctness, reference file ``eulstat'' and look for the following:
1) "turb. kinetic energy  :" in eulstat should not increase;
2) "eulstat: rms velocities & uv   :" in eulstat should have identical first two terms;
3) "eulstat: taylor microscales    :" in eulstat should also have identical first two terms;

# Timing information:
For time spent by each time step, refer to file ``log''. It reports the min, max and average time 
spent on each time step by all the PE's. One should expect step 1 will take slightly longer time 
due to time needed for initialization, and IO steps will take noticable longer time.  

Files step_time.csh and stats.awk are provided to be used in the run directory to process the file
``log'' and extract timing info from it. Command ``csh step_time.csh'' will output the processed
information. Depending on the number of time steps and where checkppoint steps are in a run, One 
may need to modify stats.awk coordingly. Currently, step_time.csh and stats.awk in dir_runs128 and 
dir_runs8192, work with the run set up there.

## To test different problem sizes: 
Input File and Case Setup
   - When changing the problem size, make sure nxpad, nypad, and nzpad in the
     input file match nx, ny, and nz. 
   - If testing with I/O for checkpointing, make sure to run the prep_dirs
     script to make the proper number of directories for process-based
     checkpointing (we can include instructions later for writing
     communicator-based checkpoint files). For 2**N MPI tasks, the argument to
     prep_dirs should be 2**(N/2), where N/2 uses integer division. For example,
     for 2**5=32 MPItasks, you should use "./prep_dirs 4" to make the output
     directories.
File dims needs to be changed to match the number of total mpi's for the run, and define the 
parallel layout. And PBS job file may need change also for the number of nodes requested, and for 
the aprun command.
